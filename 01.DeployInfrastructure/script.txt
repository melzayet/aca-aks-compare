Cloud Native applications deliver a lot of value. Yet, there are lots of moving parts to reach the desired scalability, availability and security goals. In this series, we will start with a high-level architecture, and gradually drill down into different parts of that architecture. You'll be amazed by the number of concepts involved. From compute, networking, into application and security concepts. However, all will be depicted, and incremental, to help you build depth over time.

To follow a Cloud Native approach, one must start with a strong solid foundation, or infrastructure. We need to build scripted & dynamic infrastructure before we can host our apps.

Let's review a sample architecture for reaching that goal.

Building cloud-native infrastructure starts by selecting a scheduler, to run our containerized apps. Sometimes called, an orchestrator. It's typically kubernetes-based. On Azure, we have AKS or Container Apps. We will see both services in more depth, in different episodes of this series.    

As we run our apps, we start seeing a need for backing services. For example, Key Vault to store our secrets, or certificates. Storage Accounts to store any blob content. Also a NoSQL database, like Cosmos DB, for persisting our data.  

All these services, will need permissions to be accessed. We'll create a Managed Identity or MI for that.  

To repeat the deployment of these resources, or tweak their configuration, we need to use "Infrastructure as Code" templates. Bicep is used here but it could have been ARM templates or Terraform. Bicep here is offering the scripted, and repeatable aspect for our infrastructure.

To continuosly deploy template changes, we will use GitHub Actions for that. The templates with be stored in GitHub. GitHub will also need the permissions to manage our Azure infrastructure.

Whether we want to upgrade our kubernetes version, add more secrets, or introduce any change; it's all automated now!

How do we implement this sample architecture?

We start by authoring our Bicep templates. Here we're using VS Code, and setting templates to create our scheduler, backing services, identities, and more. There are lots of "Infrastructure as Code" templates out there, to use as a starting point.

Our infrastructure definition is ready.  We can store it in GitHub.  But we also want to author a GitHub workflow.  It will re-deploy the infrastructure templates each time we update them.  We will create one workflow for AKS template changes.  We'll create another one for Container Apps.

So does GitHub have the permission to deploy our Bicep templates? Well,not yet. First, we need to create an AAD App Registration. Then using the concept of "Workflow Identity Federation", we will trust our specific GitHub org, repository and branch, to use this registered AAD app. I am using the Azure Portal here to create the app, but this could have been automated. Please note that we have also created another AAD app for AKS applications. More on this in coming episodes.

OK, but this AAD app has no permissions? Yes, that's why we need to create a Resource Group, and make this app an owner of it. The Resource Group will be a logical grouping of our infrastructure resources.  But why do we set Owner permissions,  and not just a Contributor? Because our templates will need to create identities, and assign permissions. The good thing though, is Owner permission here, is narrowly scoped to this resource group. We will create another resource group for Container Apps.

Are we ready to deploy our infrastructure?  Nearly there.  But our Bicep templates have many parameters. For example, our subscription ID, resource group name, and more.  These are best stored as GitHub secrets.

Now, we're ready to deploy. All we have to do, is to commit our templates and workflows, into our git repository. The GitHub workflows will kick off shortly after.

We now have 2 resource groups. One for AKS infrastructure, and the other for Container Apps.

That's it. If you haven't already, please find this episode page in "depicted.cloud" website. You will find some follow-up resources.   Thanks for watching, and stay posted for a coming episode!    